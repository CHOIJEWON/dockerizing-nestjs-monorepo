name: cats-api ci/cd boilerplate

on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths:
      - 'apps/cats-api/**'

jobs:
  build_and_push:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.title, '[cats-api]')
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 🔑 Init ENV File
        run: |
          echo "TEST=${{ secrets.TEST }}" >> .prod.env

      - name: 🔒 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 👨‍💻 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🐳 Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          AUTH_IMAGE_NAME: ${{ secrets.CATS_IMAGE_NAME }}
          DEFAULT_IMAGE_TAG: ${{ secrets.DEFAULT_IMAGE_TAG }}
          ECR_REGISTRY: ${{ secrets.AWS_ECR_CATS_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker compose build $AUTH_IMAGE_NAME
          docker tag $AUTH_IMAGE_NAME:$DEFAULT_IMAGE_TAG $ECR_REGISTRY/$AUTH_IMAGE_NAME:$IMAGE_TAG
          docker push $ECR_REGISTRY/$AUTH_IMAGE_NAME:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$AUTH_IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 📁 Retrieve existing task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.CATS_TASK_NAME }} --query 'taskDefinition' > task-definition.json

      - name: 🧹 Remove 'compatibilities' from task definition
        run: |
          jq 'del(.compatibilities)' task-definition.json > updated-task-definition.json

      - name: 🚀 Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.CATS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: 🖥️ Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.CATS_ESC_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: 📢 Send Slack notification
        if: always() # 항상 실행되도록 설정
        uses: slackapi/slack-github-action@v1.17.0
        with:
          payload: |
            {
              "text": "CI/CD 작업이 완료되었습니다. ${GITHUB_REPOSITORY}의 ${GITHUB_REF}에서 작업이 수행되었습니다.",
              "attachments": [
                {
                  "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                  "text": "작업 상태: ${{ job.status }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
